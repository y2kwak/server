# Testing JSON escaping in optimizer trace output
set optimizer_trace="enabled=on";
# Test 1: Simple double quotes
SELECT LENGTH("a");
LENGTH("a")
1
SELECT json_valid(trace) AS valid_json, trace FROM information_schema.optimizer_trace;
valid_json	trace
1	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "expanded_query": "select octet_length('a') AS `LENGTH(\"a\")`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}
# Test 2: Nested quotes
SELECT LENGTH("a\"b");
LENGTH("a\"b")
3
SELECT json_valid(trace) AS valid_json, trace FROM information_schema.optimizer_trace;
valid_json	trace
1	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "expanded_query": "select octet_length('a\"b') AS `LENGTH(\"a\\\"b\")`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}
# Test 3: Special characters with quotes
SELECT LENGTH("a\n\"b\t\"c");
LENGTH("a\n\"b\t\"c")
7
SELECT json_valid(trace) AS valid_json, trace FROM information_schema.optimizer_trace;
valid_json	trace
1	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "expanded_query": "select octet_length('a\\n\"b\\t\"c') AS `LENGTH(\"a\\n\\\"b\\t\\\"c\")`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}
# Test 4: New line
SELECT COLUMN_JSON(COLUMN_CREATE("foo", "New
line" AS CHAR));
COLUMN_JSON(COLUMN_CREATE("foo", "New
line" AS CHAR))
{"foo":"New\u000Aline"}
SELECT json_valid(trace) AS valid_json, trace FROM information_schema.optimizer_trace;
valid_json	trace
1	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "expanded_query": "select column_json(column_create('foo','New\\nline' AS char charset latin1 collate latin1_swedish_ci )) AS `COLUMN_JSON(COLUMN_CREATE(\"foo\", \"New\nline\" AS CHAR))`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}
# Test 5: Backslashes
SELECT LENGTH("a\\b");
LENGTH("a\\b")
3
SELECT json_valid(trace) AS valid_json, trace FROM information_schema.optimizer_trace;
valid_json	trace
1	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "expanded_query": "select octet_length('a\\\\b') AS `LENGTH(\"a\\\\b\")`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}
# Test 6: JSON functions
SELECT JSON_EXTRACT('{"key":"value"}', "$.key");
JSON_EXTRACT('{"key":"value"}', "$.key")
"value"
SELECT json_valid(trace) AS valid_json, trace FROM information_schema.optimizer_trace;
valid_json	trace
1	{
  "steps": [
    {
      "join_preparation": {
        "select_id": 1,
        "steps": [
          {
            "expanded_query": "select json_extract('{\"key\":\"value\"}','$.key') AS `JSON_EXTRACT('{\"key\":\"value\"}', \"$.key\")`"
          }
        ]
      }
    },
    {
      "join_optimization": {
        "select_id": 1,
        "steps": []
      }
    }
  ]
}
